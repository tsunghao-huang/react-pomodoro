{"version":3,"sources":["components/Pomodoro-sub/ControlPanel.js","components/Pomodoro-sub/DisplayPanel.js","components/Pomodoro.js","components/TodoApp-sub/Form.js","components/TodoApp-sub/FilterButton.js","components/TodoApp-sub/utils.js","components/TodoApp-sub/Todo.js","components/TodoApp.js","index.js"],"names":["ControlPanel","id","this","props","value","toLowerCase","className","aria-label","onClick","handleDefaultBtn","lang","LANG_MAP","handleInDecrement","aria-hidden","aria-live","length","React","Component","DisplayPanel","currentCounting","role","timeLeft","handleStartToggle","counting","handleReset","Pomodoro","state","breakLength","sessionLength","english","bind","clockify","tick","handleLanguage","setState","document","documentElement","setAttribute","clearInterval","intervalID","audio","getElementById","pause","currentTime","style","color","getElementsByTagName","text","e","target","includes","currentTarget","play","newCurrentCounting","newTimeLeft","setInterval","timeInSecs","minutes","Math","floor","seconds","controlPanelList","map","v","key","preload","src","Form","useState","name","setName","targetSessions","setTargetSessions","handleChange","onSubmit","preventDefault","replace","addTask","htmlFor","type","autoComplete","onChange","required","min","max","placeholder","FilterButton","aria-pressed","isPressed","setFilter","usePrevious","ref","useRef","useEffect","current","Todo","editFieldRef","editButtonRef","isEditing","setEditing","newName","setNewName","newTargetSessions","setNewTargetSessions","completedSessions","newCompletedSessions","setNewCompletedSessions","wasEditing","editingTemplate","editTask","viewTemplate","toggleTaskCompleted","completed","deleteTask","select","focus","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","TodoApp","localStorage","getItem","setItem","JSON","stringify","tasks","localTodo","parse","setTasks","updateLocalStorage","updatedTodos","filter","updatedTasks","parseInt","remainingTasks","sanitizedNewName","editedTaskList","headingText","taskList","filterList","tasksNoun","listHeadingRef","prevTaskLength","sanitizedName","newTask","nanoid","tabIndex","aria-labelledby","DATA","Session","Break","Todos","Add","Edit","Delete","Check","Cancel","Save","Progress","App","setLang","ReactDOM","render"],"mappings":"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","file":"static/js/main.fa1cd195.chunk.js","sourcesContent":["import React from 'react';\n\nclass ControlPanel extends React.Component {\n    render() {\n        return (\n            <div id={`${this.props.value.toLowerCase()}-panel`} className='control-panel'>\n                <button\n                    aria-label={`set ${this.props.value.toLowerCase()} to default duration.`}\n                    id={`default-${this.props.value.toLowerCase()}`}\n                    onClick={this.props.handleDefaultBtn}\n                >\n                    {(this.props.lang === 'en') ? this.props.value : this.props.LANG_MAP[this.props.value]}\n                </button>\n\n                <div>\n                    <button\n                        aria-label={`decrement ${this.props.value.toLowerCase()} duration by 1 minute.`}\n                        id={`${this.props.value.toLowerCase()}-decrement`}\n                        onClick={this.props.handleInDecrement}\n                        className='btn-level'\n                    >\n                        <i className=\"fas fa-arrow-down fa-2x\" aria-hidden=\"true\"></i>\n                    </button>\n\n                    <p aria-label={`Custom ${this.props.value}`} aria-live='assertive' id={`${this.props.value.toLowerCase()}-length`} className='btn-level'>{this.props.length}</p>\n\n                    <button\n                        aria-label={`increment ${this.props.value.toLowerCase()} duration by 1 minute.`}\n                        id={`${this.props.value.toLowerCase()}-increment`}\n                        onClick={this.props.handleInDecrement}\n                        className='btn-level'\n                    >\n                        <i className=\"fas fa-arrow-up fa-2x\" aria-hidden=\"true\"></i>\n                    </button>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default ControlPanel;","import React from 'react';\n\nexport default function DisplayPanel(props) {\n    return (\n        <div id='display-panel' aria-label=\"display panel\">\n            <p id='timer-label' aria-label={`Currently counting for ${props.currentCounting}`}>{(props.lang === 'en') ? props.currentCounting : props.LANG_MAP[props.currentCounting]}</p>\n            <p id='time-left' role='timer' aria-label={`Duration for ${props.currentCounting}`}>{props.timeLeft}</p>\n\n            <div>\n                <button\n                    aria-label={`start ${props.currentCounting}`} id=\"start_stop\" onClick={props.handleStartToggle} className='btn-level'>\n                    <i className={`fas ${props.counting ? \"fa-pause\" : \"fa-play\"} fa-3x`}></i>\n                </button>\n                <button aria-label={`reset to session, 25 minutes.`} id=\"reset\" onClick={props.handleReset} className='btn-level'>\n                    <i className=\"fas fa-redo fa-3x\"></i>\n                </button>\n            </div>\n\n        </div>\n    )\n}","import React from 'react';\nimport ControlPanel from './Pomodoro-sub/ControlPanel';\nimport DisplayPanel from './Pomodoro-sub/DisplayPanel';\n\nclass Pomodoro extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            breakLength: 5,\n            sessionLength: 25,\n            timeLeft: 1500,\n            counting: false,\n            currentCounting: 'Session',\n            english: true\n        };\n        this.handleReset = this.handleReset.bind(this);\n        this.clockify = this.clockify.bind(this);\n        this.handleStartToggle = this.handleStartToggle.bind(this);\n        this.tick = this.tick.bind(this);\n        this.handleInDecrement = this.handleInDecrement.bind(this);\n        this.handleDefaultBtn = this.handleDefaultBtn.bind(this);\n        this.handleLanguage = this.handleLanguage.bind(this);\n    }\n\n    handleLanguage() {\n        this.setState({\n            english: !this.state.english\n        });\n        if (this.state.english) {\n            document.documentElement.setAttribute('lang', 'zh-TW');\n        } else {\n            document.documentElement.setAttribute('lang', 'en');\n        }\n    }\n\n    handleReset() {\n        this.setState({\n            breakLength: 5,\n            sessionLength: 25,\n            timeLeft: 1500,\n            counting: false,\n            currentCounting: 'Session',\n        });\n        // reset should stop the timer as well\n        clearInterval(this.intervalID);\n\n        // and the audio\n        const audio = document.getElementById('beep');\n        audio.pause();\n        audio.currentTime = 0;\n\n        // and set the color back to default, if it is changed\n        document.getElementById('time-left').style.color = null;\n\n        // and the title\n        document.getElementsByTagName('title')[0].text = 'Pomodoro Clock';\n    }\n\n    handleDefaultBtn(e) {\n        // ignore click, while the clock is counting\n        if (this.state.counting) return;\n        // console.log(e.target.id);\n        if (e.target.id.includes('session')) {\n            this.setState({\n                sessionLength: 25,\n                timeLeft: 1500,\n                counting: false,\n                currentCounting: 'Session',\n            });\n        } else {\n            this.setState({\n                breakLength: 5,\n                timeLeft: 300,\n                counting: false,\n                currentCounting: 'Break',\n            });\n        }\n    }\n\n    handleInDecrement(e) {\n        // in case the clock is still running, disable handleInDecrement()\n        if (this.state.counting) return;\n        switch (`${e.currentTarget.id},current:${this.state.currentCounting}`) {\n            case 'break-decrement,current:Session':\n                if (this.state.breakLength > 1) {\n                    this.setState(state => ({\n                        breakLength: state.breakLength - 1,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'break-increment,current:Session':\n                if (this.state.breakLength < 60) {\n                    this.setState(state => ({\n                        breakLength: state.breakLength + 1\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'break-decrement,current:Break':\n                if (this.state.breakLength > 1) {\n                    this.setState(state => ({\n                        breakLength: state.breakLength - 1,\n                        timeLeft: state.timeLeft - 60,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'break-increment,current:Break':\n                if (this.state.breakLength < 60) {\n                    this.setState(state => ({\n                        breakLength: state.breakLength + 1,\n                        timeLeft: state.timeLeft + 60,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'session-decrement,current:Session':\n                if (this.state.sessionLength > 1) {\n                    this.setState(state => ({\n                        sessionLength: state.sessionLength - 1,\n                        timeLeft: state.timeLeft - 60,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'session-increment,current:Session':\n                if (this.state.sessionLength < 60) {\n                    this.setState(state => ({\n                        sessionLength: state.sessionLength + 1,\n                        timeLeft: state.timeLeft + 60,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'session-decrement,current:Break':\n                if (this.state.sessionLength > 1) {\n                    this.setState(state => ({\n                        sessionLength: state.sessionLength - 1,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'session-increment,current:Break':\n                if (this.state.sessionLength < 60) {\n                    this.setState(state => ({\n                        sessionLength: state.sessionLength + 1,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            default:\n                return;\n\n        }\n\n    }\n\n    tick() {\n\n        // change color when time left <= 60\n        if (this.state.timeLeft <= 60) {\n            document.getElementById('time-left').style.color = \"#F8BFCE\";\n        } else {\n            document.getElementById('time-left').style.color = null;\n        }\n        if (this.state.timeLeft <= 0) {\n\n            clearInterval(this.intervalID);\n            const audio = document.getElementById('beep');\n            audio.play();\n            const newCurrentCounting = (this.state.currentCounting === 'Session') ? 'Break' : 'Session';\n            const newTimeLeft = (this.state.currentCounting === 'Session') ? this.state.breakLength * 60 : this.state.sessionLength * 60;\n\n            document.getElementById('time-left').style.color = null;\n            this.setState({\n                timeLeft: newTimeLeft,\n                currentCounting: newCurrentCounting,\n            });\n            this.intervalID = setInterval(() => { this.tick() }, 1000);\n            return;\n        };\n\n\n\n        this.setState({\n            timeLeft: this.state.timeLeft - 1\n        });\n\n        document.getElementsByTagName('title')[0].text = `(${this.clockify(this.state.timeLeft)}) Pomodoro Clock`;\n\n    }\n\n    handleStartToggle() {\n        const audio = document.getElementById('beep');\n        audio.play();\n        audio.pause();\n        audio.currentTime = 0;\n        if (!this.state.counting) {\n            this.intervalID = setInterval(() => { this.tick() }, 1000);\n        } else {\n            clearInterval(this.intervalID);\n        }\n\n        this.setState(state => ({\n            counting: !this.state.counting,\n        }));\n\n    }\n\n    clockify(timeInSecs) {\n        let minutes = Math.floor(timeInSecs / 60);\n        let seconds = timeInSecs - 60 * minutes;\n        // insure mm:ss format at any time\n        seconds = (seconds < 10) ? '0' + seconds : seconds;\n        minutes = (minutes < 10) ? '0' + minutes : minutes;\n\n        return minutes + ':' + seconds\n    }\n\n    render() {\n\n        const controlPanelList = ['Break', 'Session'].map((v) => (\n            <ControlPanel\n                value={v}\n                key={`${v}-panel`}\n                currentCounting={this.state.currentCounting}\n                length={(v === 'Break') ? this.state.breakLength : this.state.sessionLength}\n                handleInDecrement={this.handleInDecrement}\n                handleDefaultBtn={this.handleDefaultBtn}\n                lang={this.props.lang}\n                LANG_MAP={this.props.LANG_MAP}\n            />\n        ));\n        return (\n            <div id='pomodoro-panel'>\n                <h1>{(this.props.lang === 'en') ? 'Pomodoro Clock' : this.props.LANG_MAP['Pomodoro Clock']}</h1>\n                <DisplayPanel\n                    timeLeft={this.clockify(this.state.timeLeft)}\n                    handleReset={this.handleReset}\n                    currentCounting={this.state.currentCounting}\n                    lang={this.props.lang}\n                    LANG_MAP={this.props.LANG_MAP}\n                    handleStartToggle={this.handleStartToggle}\n                    counting={this.state.counting}\n                />\n                <div id='control-panels-group' className='btn-group'>\n                    {controlPanelList}\n                </div>\n                <audio id=\"beep\" preload=\"auto\" src=\"https://raw.githubusercontent.com/tsunghao-huang/react-pomodoro/gh-pages/homeland.mp3\"></audio>\n            </div>\n\n        )\n    }\n}\n\nexport default Pomodoro;","import React, { useState } from \"react\";\n\nfunction Form(props) {\n    const [name, setName] = useState(\"\");\n    const [targetSessions, setTargetSessions] = useState(\"\");\n\n    function handleChange(e) {\n        if (e.target.id === 'new-todo-input') {\n            setName(e.target.value);\n        } else if (e.target.id === 'new-todo-target-session') {\n            setTargetSessions(e.target.value);\n        }\n\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        if (name.replace(/\\s*/, \"\") === \"\") return;\n        props.addTask(name, targetSessions);\n        setName(\"\");\n        setTargetSessions(\"\");\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <h2 className=\"label-wrapper\">\n                <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n                    {(props.lang === 'en') ? 'What needs to be done?'\n                        : props.LANG_MAP['What needs to be done?']}\n                </label>\n            </h2>\n            <fieldset id=\"new-todo-fieldset\">\n                <input\n                    type=\"text\"\n                    id=\"new-todo-input\"\n                    className=\"input input__lg\"\n                    name=\"text\"\n                    autoComplete=\"off\"\n                    value={name}\n                    onChange={handleChange}\n                    required={true}\n                />\n                <input\n                    type=\"number\"\n                    id=\"new-todo-target-session\"\n                    className=\"input input__lg\"\n                    value={targetSessions}\n                    onChange={handleChange}\n                    min=\"0\"\n                    max=\"57\"\n                    placeholder={`${(props.lang === 'en') ? 'Target sessions' : props.LANG_MAP['Target sessions']}?`}\n                />\n            </fieldset>\n\n            <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n                {(props.lang === 'en') ? 'Add' : props.LANG_MAP['Add']}\n            </button>\n        </form>\n    );\n}\n\nexport default Form;","import React from \"react\";\n\nfunction FilterButton(props) {\n    return (\n        <button\n            type=\"button\"\n            className=\"btn toggle-btn\"\n            aria-pressed={props.isPressed}\n            onClick={() => props.setFilter(props.name)}\n        >\n            <span className=\"visually-hidden\">Show </span>\n            <span>{(props.lang === 'en') ? props.name : props.LANG_MAP[props.name]} </span>\n            <span className=\"visually-hidden\"> tasks</span>\n        </button>\n    );\n}\n\nexport default FilterButton;","import { useRef, useEffect } from 'react';\n\nexport default function usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}","import React, { useState, useRef, useEffect } from \"react\";\nimport usePrevious from \"./utils\";\n\nexport default function Todo(props) {\n\n    const editFieldRef = useRef(null);\n    const editButtonRef = useRef(null);\n\n    const [isEditing, setEditing] = useState(false);\n    const [newName, setNewName] = useState(props.name);\n    const [newTargetSessions, setNewTargetSessions] = useState(props.targetSessions);\n    const [newCompletedSessions, setNewCompletedSessions] = useState(props.completedSessions);\n    const wasEditing = usePrevious(isEditing);\n\n    function handleChange(e) {\n        if (e.target.id.includes('completed-sessions')) {\n            setNewCompletedSessions(e.target.value);\n        } else if (e.target.id.includes('target-sessions')) {\n            setNewTargetSessions(e.target.value);\n        } else {\n            setNewName(e.target.value);\n        }\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        if (newName.replace(/\\s*/, \"\") === \"\") return;\n        props.editTask(props.id, newName, newCompletedSessions, newTargetSessions);\n        setEditing(false);\n    }\n\n    const editingTemplate = (\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n                <fieldset className=\"todo-fieldset\">\n                    <label className=\"todo-label\" htmlFor={props.id}>\n                        {(props.lang === 'en') ? `New name for ${props.name}` : `${props.name} 的新名字`}\n                    </label>\n                    <input\n                        id={props.id}\n                        className=\"input input__lg edit-todo-name\"\n                        type=\"text\"\n                        value={newName}\n                        onChange={handleChange}\n                        ref={editFieldRef}\n                        required={true}\n                    />\n                    <div className='edit-todo-sessions'>\n                        <label className=\"todo-label todo-label-sessions\" htmlFor={`${props.id}-completed-sessions`}>\n                            {(props.lang === 'en') ? 'Completed sessions' : props.LANG_MAP['Completed sessions']}\n                        </label>\n                        <input\n                            id={`${props.id}-completed-sessions`}\n                            className=\"input input__lg edit-todo-completed-sessions\"\n                            type=\"number\"\n                            value={newCompletedSessions}\n                            onChange={handleChange}\n                            min=\"0\"\n                            max={newTargetSessions}\n                            placeholder=\"Sessions?\"\n                        />\n                    </div>\n                    <div className='edit-todo-sessions'>\n                        <label className=\"todo-label todo-label-sessions\" htmlFor={`${props.id}-target-sessions`}>\n                            {(props.lang === 'en') ? 'Target sessions' : props.LANG_MAP['Target sessions']}\n                        </label>\n                        <input\n                            id={`${props.id}-target-sessions`}\n                            className=\"input input__lg edit-todo-target-sessions\"\n                            type=\"number\"\n                            value={newTargetSessions}\n                            onChange={handleChange}\n                            min={newCompletedSessions}\n                            max=\"57\"\n                            placeholder=\"Sessions?\"\n                        />\n                    </div>\n                </fieldset>\n\n            </div>\n            <div className=\"todo-btn-group\">\n                <button\n                    type=\"button\"\n                    className=\"btn todo-cancel\"\n                    onClick={() => setEditing(false)}\n                >\n                    <i className=\"fas fa-times\" aria-hidden=\"true\"></i>\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Cancel' : props.LANG_MAP['Cancel']}\n                        renaming {props.name}\n                    </span>\n                </button>\n                <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n                    <i className=\"far fa-save\" aria-hidden=\"true\"></i>\n\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Save' : props.LANG_MAP['Save']}\n                        new name for {props.name}\n                    </span>\n                </button>\n            </div>\n        </form>\n    );\n    const viewTemplate = (\n        <div className=\"stack-small\">\n            <div className=\"c-cb\">\n                {/* <input\n                    id={props.id}\n                    type=\"checkbox\"\n                    defaultChecked={props.completed}\n                    onChange={() => props.toggleTaskCompleted(props.id)}\n                /> */}\n                <button\n                    id={props.id}\n                    type=\"button\"\n                    className=\"btn check-btn\"\n                    onClick={() => props.toggleTaskCompleted(props.id)}\n                >\n                    <i className={`${props.completed ? \"fas fa-check-circle\" : \"far fa-circle\"}`} aria-hidden=\"true\"></i>\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Edit' : props.LANG_MAP['Edit']}\n                        {props.name}\n                    </span>\n                </button>\n                <div className={`todo-label ${props.completed ? \"todo-label-checked\" : \"\"}`} htmlFor={props.id}>\n                    <span className=\"todo-label-name\">{props.name}</span>\n                    <span className=\"todo-label-progress\">{(props.targetSessions === 0 | props.targetSessions === \"\") ? '' : `${(props.lang === 'en') ? 'Progress' : props.LANG_MAP['Progress']}: ${props.completedSessions ? props.completedSessions : 0}/${props.targetSessions}`}</span>\n                </div>\n            </div>\n            <div className=\"todo-btn-group\">\n                <button\n                    type=\"button\"\n                    className=\"btn\"\n                    onClick={() => setEditing(true)}\n                    ref={editButtonRef}\n                >\n                    <i className=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i>\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Edit' : props.LANG_MAP['Edit']}\n                        {props.name}\n                    </span>\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn__danger\"\n                    onClick={() => props.deleteTask(props.id)}\n                >\n                    <i className=\"fas fa-trash-alt\" aria-hidden=\"true\"></i>\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Delete' : props.LANG_MAP['Delete']}\n                        {props.name}\n                    </span>\n                </button>\n            </div>\n        </div>\n    );\n\n    useEffect(() => {\n        if (!wasEditing && isEditing) {\n            editFieldRef.current.select();\n            editFieldRef.current.focus();\n            // initiated value for the input field\n            setNewName(props.name);\n            setNewCompletedSessions(props.completedSessions);\n            setNewTargetSessions(props.targetSessions);\n        }\n        if (wasEditing && !isEditing) {\n            editButtonRef.current.focus();\n        }\n\n    }, [wasEditing, isEditing, props.name, props.completedSessions, props.targetSessions]);\n\n    return (\n        <li className=\"todo stack-small\">\n            {isEditing ? editingTemplate : viewTemplate}\n        </li>\n    );\n}","import React, { useState, useRef, useEffect } from 'react';\nimport \"./TodoApp.css\";\nimport Form from \"./TodoApp-sub/Form\";\nimport FilterButton from \"./TodoApp-sub/FilterButton\";\nimport Todo from \"./TodoApp-sub/Todo\";\nimport { nanoid } from \"nanoid\";\nimport usePrevious from \"./TodoApp-sub/utils\";\n\nconst FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nexport default function TodoApp(props) {\n\n    const localStorageKey = 'localTodo';\n    if (localStorage.getItem(localStorageKey) === null) {\n        localStorage.setItem(localStorageKey, JSON.stringify(props.tasks));\n    }\n    const localTodo = JSON.parse(localStorage.getItem(localStorageKey));\n    const [tasks, setTasks] = useState(localTodo);\n\n\n    function updateLocalStorage(updatedTodos) {\n        localStorage.setItem(localStorageKey, JSON.stringify(updatedTodos));\n        return;\n    }\n    // const [tasks, setTasks] = useState(props.tasks);\n\n    const [filter, setFilter] = useState('All');\n\n    function addTask(name, targetSessions) {\n        const sanitizedName = name.replace(/(^\\s*)|(\\s*$)/g, \"\");\n        const newTask = {\n            id: \"todo-\" + nanoid(),\n            name: sanitizedName,\n            completed: false,\n            completedSessions: 0,\n            targetSessions: (targetSessions === \"\") ? 0 : parseInt(targetSessions)\n        };\n        setTasks([...tasks, newTask]);\n        updateLocalStorage([...tasks, newTask]);\n    }\n\n    function toggleTaskCompleted(id) {\n        const updatedTasks = tasks\n            .map(task => {\n                // if this task has the same ID as the edited task\n                if (id === task.id) {\n                    // use object spread to make a new obj\n                    // whose `completed` prop has been inverted\n                    return { ...task, completed: !task.completed }\n                }\n                return task;\n            })\n            .map(task => { // update completedSessions with toggle\n                if (task.completed) {\n                    return { ...task, completedSessions: parseInt(task.targetSessions) };\n                } else if (task.completedSessions === task.targetSessions) {\n                    // task not completed but have the same completed & target sessions\n                    // reset completedSessions to 0;\n                    return { ...task, completedSessions: 0 };\n                }\n                return task;\n            })\n        setTasks(updatedTasks);\n        updateLocalStorage(updatedTasks);\n    }\n\n    function deleteTask(id) {\n        const remainingTasks = tasks.filter(task => id !== task.id);\n        setTasks(remainingTasks);\n        updateLocalStorage(remainingTasks);\n    }\n\n    function editTask(id, newName, newCompletedSessions, newTargetSessions) {\n        const sanitizedNewName = newName.replace(/(^\\s*)|(\\s*$)/g, \"\");\n        const editedTaskList = tasks\n            .map(task => {\n                // if this task has the same ID as the edited task\n                if (id === task.id) {\n                    //\n                    return {\n                        ...task,\n                        ...{\n                            name: sanitizedNewName,\n                            completedSessions: (newCompletedSessions === \"\") ? 0 : parseInt(newCompletedSessions),\n                            targetSessions: (newTargetSessions === \"\") ? 0 : parseInt(newTargetSessions)\n                        }\n                    };\n                }\n                return task;\n            })\n            .map(task => { // validate target & completed sessions\n                if ((task.targetSessions !== 0) && (task.targetSessions === task.completedSessions)) {\n                    return { ...task, completed: true }\n                } else if ((task.targetSessions !== 0) && (task.targetSessions !== task.completedSessions)) {\n                    return { ...task, completed: false }\n                } else {\n                    return task;\n                }\n            })\n\n        setTasks(editedTaskList);\n        updateLocalStorage(editedTaskList);\n    }\n\n    const taskList = tasks\n        .filter(FILTER_MAP[filter])\n        .map(task => (\n            <Todo\n                id={task.id}\n                name={task.name}\n                completed={task.completed}\n                key={task.id}\n                toggleTaskCompleted={toggleTaskCompleted}\n                deleteTask={deleteTask}\n                editTask={editTask}\n                lang={props.lang}\n                LANG_MAP={props.LANG_MAP}\n                completedSessions={task.completedSessions}\n                targetSessions={task.targetSessions}\n            />\n        ));\n\n    const filterList = FILTER_NAMES.map(name => (\n        <FilterButton\n            key={name}\n            name={name}\n            isPressed={name === filter}\n            setFilter={setFilter}\n            lang={props.lang}\n            LANG_MAP={props.LANG_MAP}\n        />\n    ));\n\n    const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n    let headingText;\n\n    if (props.lang === 'en') {\n        switch (filter) {\n            case 'All':\n                headingText = `${taskList.length} ${tasksNoun} in total`;\n                break;\n            default:\n                headingText = `${taskList.length} ${tasksNoun} ${filter.toLowerCase()}`;\n        }\n\n    } else {\n        headingText = `${props.LANG_MAP[filter]} ${taskList.length} 件事`;\n    }\n\n    const listHeadingRef = useRef(null);\n    const prevTaskLength = usePrevious(tasks.length);\n\n    useEffect(() => {\n        if (tasks.length - prevTaskLength === -1) {\n            listHeadingRef.current.focus();\n        }\n    }, [tasks.length, prevTaskLength]);\n\n    return (\n        <div id=\"todoapp\" className=\"stack-large\">\n            <h1>{(props.lang === 'en') ? 'Todos' : props.LANG_MAP['Todos']}</h1>\n            <Form addTask={addTask} lang={props.lang} LANG_MAP={props.LANG_MAP} />\n            <div className=\"filters btn-group stack-exception\">\n                {filterList}\n            </div>\n            <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n                {headingText}\n            </h2>\n            <ul\n                role=\"list\"\n                className=\"todo-list stack-large stack-exception\"\n                aria-labelledby=\"list-heading\"\n            >\n                {taskList}\n\n            </ul>\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Pomodoro from './components/Pomodoro';\nimport TodoApp from './components/TodoApp';\n\nconst DATA = [\n    { id: \"todo-0\", name: \"Eat\", completed: true, completedSessions: 2, targetSessions: 2 },\n    { id: \"todo-1\", name: \"Sleep\", completed: false, completedSessions: 0, targetSessions: 0 },\n    { id: \"todo-2\", name: \"Repeat\", completed: false, completedSessions: 0, targetSessions: 0 }\n];\n\nconst LANG_MAP = {\n    'Pomodoro Clock': '蕃 茄 鐘',\n    Session: '工 作',\n    Break: '休 息',\n    Todos: '待辦事項',\n    'What needs to be done?': '有事嗎？',\n    Add: '新增',\n    All: '全部',\n    Active: '待辦',\n    Completed: '完成',\n    Edit: '編輯',\n    Delete: '刪除',\n    Check: '標記完成',\n    Cancel: '取消',\n    Save: '儲存',\n    Progress: '進度',\n    'Target sessions': '目標番茄數',\n    'Completed sessions': '完成番茄數'\n};\n\nfunction App() {\n\n    const [lang, setLang] = useState('en');\n\n    useEffect(() => {\n        document.documentElement.setAttribute('lang', lang);\n    }, [lang]);\n\n    function handleLanguage() {\n        (lang === 'en') ? setLang('zh-TW') : setLang('en');\n    }\n\n    return (\n        <div id=\"App\">\n            <button aria-label={`switch language to ${(lang === 'en') ? 'Mandarin' : 'English'}`} id='language-btn' onClick={handleLanguage}>{(lang === 'en') ? '繁體中文' : 'English'}</button>\n            <Pomodoro lang={lang} LANG_MAP={LANG_MAP} />\n            <TodoApp tasks={DATA} lang={lang} LANG_MAP={LANG_MAP} />\n        </div>\n\n    )\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}