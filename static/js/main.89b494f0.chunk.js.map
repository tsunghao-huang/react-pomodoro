{"version":3,"sources":["components/Pomodoro-sub/ControlPanel.js","components/Pomodoro-sub/DisplayPanel.js","components/Pomodoro.js","components/TodoApp-sub/Form.js","components/TodoApp-sub/FilterButton.js","components/TodoApp-sub/utils.js","components/TodoApp-sub/Todo.js","components/TodoApp.js","index.js"],"names":["ControlPanel","id","this","props","value","toLowerCase","className","aria-pressed","currentCounting","aria-label","onClick","handleDefaultBtn","lang","LANG_MAP","handleInDecrement","aria-hidden","aria-live","length","React","Component","DisplayPanel","englishHeading","currentTask","name","mandarinHeading","replace","role","timeLeft","handleStartToggle","counting","handleReset","Pomodoro","state","breakLength","workLength","english","bind","clockify","tick","handleLanguage","setState","document","documentElement","setAttribute","clearInterval","intervalID","audio","getElementById","pause","currentTime","style","color","getElementsByTagName","text","e","target","includes","currentTarget","play","newCurrentCounting","newTimeLeft","setInterval","updateTaskProgress","timeInSecs","minutes","Math","floor","seconds","controlPanelList","map","v","key","preload","src","Form","useState","setName","targetSessions","setTargetSessions","handleChange","onSubmit","preventDefault","addTask","focus","htmlFor","type","autoComplete","onChange","required","placeholder","min","max","FilterButton","isPressed","setFilter","usePrevious","ref","useRef","useEffect","current","Todo","editFieldRef","editButtonRef","isEditing","setEditing","newName","setNewName","targetPomodoros","newTargetPomodoros","setNewTargetPomodoros","completedPomodoros","newCompletedPomodoros","setNewCompletedPomodoros","wasEditing","stopPropagation","setEditingAndPreventBubbling","b","editingTemplate","editTask","handleSubmit","viewTemplate","toggleTaskCompleted","completed","deleteTask","select","updateCurrentTask","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","TodoApp","tasks","filter","updatedTasks","parseInt","setTasks","remainingTasks","sanitizedNewName","editedTaskList","headingText","taskList","filterList","tasksNoun","listHeadingRef","prevTaskLength","sanitizedName","newTask","nanoid","tabIndex","aria-labelledby","DATA","Work","Break","Todos","Add","Edit","Delete","Check","Cancel","Save","Progress","App","localStorage","getItem","setItem","JSON","stringify","localTodo","parse","setLang","t","setCurrentTask","updatedTodos","newTaskList","ReactDOM","render"],"mappings":"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","file":"static/js/main.89b494f0.chunk.js","sourcesContent":["import React from 'react';\n\nclass ControlPanel extends React.Component {\n    render() {\n        return (\n            <div id={`${this.props.value.toLowerCase()}-panel`} className='control-panel'>\n                <button\n                    className='btn toggle-btn'\n                    aria-pressed={this.props.currentCounting === this.props.value}\n                    aria-label={`set ${this.props.value.toLowerCase()} to default duration.`}\n                    id={`default-${this.props.value.toLowerCase()}`}\n                    onClick={this.props.handleDefaultBtn}\n                >\n                    {(this.props.lang === 'en') ? this.props.value : this.props.LANG_MAP[this.props.value]}\n                </button>\n\n                <div>\n                    <button\n                        aria-label={`decrement ${this.props.value.toLowerCase()} duration by 1 minute.`}\n                        id={`${this.props.value.toLowerCase()}-decrement`}\n                        onClick={this.props.handleInDecrement}\n                        className='btn-level'\n                    >\n                        <i className=\"fas fa-arrow-down fa-2x\" aria-hidden=\"true\"></i>\n                    </button>\n\n                    <p aria-label={`Custom ${this.props.value}`} aria-live='assertive' id={`${this.props.value.toLowerCase()}-length`} className='btn-level'>{this.props.length}</p>\n\n                    <button\n                        aria-label={`increment ${this.props.value.toLowerCase()} duration by 1 minute.`}\n                        id={`${this.props.value.toLowerCase()}-increment`}\n                        onClick={this.props.handleInDecrement}\n                        className='btn-level'\n                    >\n                        <i className=\"fas fa-arrow-up fa-2x\" aria-hidden=\"true\"></i>\n                    </button>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default ControlPanel;","import React from 'react';\n\nexport default function DisplayPanel(props) {\n    const englishHeading = (\n        <p id='pomodoro-heading'>Time to {props.currentCounting} {(props.currentTask) ? `${props.currentCounting === 'Work' ? 'on' : 'from'} ${props.currentTask.name}` : \"\"}</p>\n    )\n\n    const mandarinHeading = (\n        <p id='pomodoro-heading'>{(props.currentTask) ? `${props.currentTask.name} 的` : \"\"}{props.LANG_MAP[props.currentCounting].replace(' ', '')}時間</p>\n    )\n\n    return (\n        <div id='display-panel' aria-label=\"display panel\">\n            {/* <p id='timer-label' aria-label={`Currently counting for ${props.currentCounting}`}>{(props.lang === 'en') ? props.currentCounting : props.LANG_MAP[props.currentCounting]}</p> */}\n            {(props.lang === 'en') ? englishHeading : mandarinHeading}\n            <p id='time-left' role='timer' aria-label={`Duration for ${props.currentCounting}`}>{props.timeLeft}</p>\n\n            <div>\n                <button\n                    aria-label={`start ${props.currentCounting}`} id=\"start_stop\" onClick={props.handleStartToggle} className='btn-level'>\n                    <i className={`fas ${props.counting ? \"fa-pause\" : \"fa-play\"} fa-3x`}></i>\n                </button>\n                <button aria-label={`reset to work, 25 minutes.`} id=\"reset\" onClick={props.handleReset} className='btn-level'>\n                    <i className=\"fas fa-redo fa-3x\"></i>\n                </button>\n            </div>\n\n        </div>\n    )\n}","import React from 'react';\nimport ControlPanel from './Pomodoro-sub/ControlPanel';\nimport DisplayPanel from './Pomodoro-sub/DisplayPanel';\n\nclass Pomodoro extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            breakLength: 5,\n            workLength: 25,\n            timeLeft: 1500,\n            counting: false,\n            currentCounting: 'Work',\n            english: true\n        };\n        this.handleReset = this.handleReset.bind(this);\n        this.clockify = this.clockify.bind(this);\n        this.handleStartToggle = this.handleStartToggle.bind(this);\n        this.tick = this.tick.bind(this);\n        this.handleInDecrement = this.handleInDecrement.bind(this);\n        this.handleDefaultBtn = this.handleDefaultBtn.bind(this);\n        this.handleLanguage = this.handleLanguage.bind(this);\n    }\n\n    handleLanguage() {\n        this.setState({\n            english: !this.state.english\n        });\n        if (this.state.english) {\n            document.documentElement.setAttribute('lang', 'zh-TW');\n        } else {\n            document.documentElement.setAttribute('lang', 'en');\n        }\n    }\n\n    handleReset() {\n        this.setState({\n            breakLength: 5,\n            workLength: 25,\n            timeLeft: 1500,\n            counting: false,\n            currentCounting: 'Work',\n        });\n        // reset should stop the timer as well\n        clearInterval(this.intervalID);\n\n        // and the audio\n        const audio = document.getElementById('beep');\n        audio.pause();\n        audio.currentTime = 0;\n\n        // and set the color back to default, if it is changed\n        document.getElementById('time-left').style.color = null;\n\n        // and the title\n        document.getElementsByTagName('title')[0].text = 'Pomodoro Clock';\n    }\n\n    handleDefaultBtn(e) {\n        // ignore click, while the clock is counting\n        if (this.state.counting) return;\n        // console.log(e.target.id);\n        if (e.target.id.includes('work')) {\n            this.setState({\n                workLength: 25,\n                timeLeft: 1500,\n                counting: false,\n                currentCounting: 'Work',\n            });\n        } else {\n            this.setState({\n                breakLength: 5,\n                timeLeft: 300,\n                counting: false,\n                currentCounting: 'Break',\n            });\n        }\n    }\n\n    handleInDecrement(e) {\n        // in case the clock is still running, disable handleInDecrement()\n        if (this.state.counting) return;\n        switch (`${e.currentTarget.id},current:${this.state.currentCounting}`) {\n            case 'break-decrement,current:Work':\n                if (this.state.breakLength > 1) {\n                    this.setState(state => ({\n                        breakLength: state.breakLength - 1,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'break-increment,current:Work':\n                if (this.state.breakLength < 60) {\n                    this.setState(state => ({\n                        breakLength: state.breakLength + 1\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'break-decrement,current:Break':\n                if (this.state.breakLength > 1) {\n                    this.setState(state => ({\n                        breakLength: state.breakLength - 1,\n                        timeLeft: state.timeLeft - 60,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'break-increment,current:Break':\n                if (this.state.breakLength < 60) {\n                    this.setState(state => ({\n                        breakLength: state.breakLength + 1,\n                        timeLeft: state.timeLeft + 60,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'work-decrement,current:Work':\n                if (this.state.workLength > 1) {\n                    this.setState(state => ({\n                        workLength: state.workLength - 1,\n                        timeLeft: state.timeLeft - 60,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'work-increment,current:Work':\n                if (this.state.workLength < 60) {\n                    this.setState(state => ({\n                        workLength: state.workLength + 1,\n                        timeLeft: state.timeLeft + 60,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'work-decrement,current:Break':\n                if (this.state.workLength > 1) {\n                    this.setState(state => ({\n                        workLength: state.workLength - 1,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'work-increment,current:Break':\n                if (this.state.workLength < 60) {\n                    this.setState(state => ({\n                        workLength: state.workLength + 1,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            default:\n                return;\n\n        }\n\n    }\n\n    tick() {\n\n        // change color when time left <= 60\n        if (this.state.timeLeft <= 60) {\n            document.getElementById('time-left').style.color = \"#F8BFCE\";\n        } else {\n            document.getElementById('time-left').style.color = null;\n        }\n        if (this.state.timeLeft <= 0) {\n\n            clearInterval(this.intervalID);\n            const audio = document.getElementById('beep');\n            audio.play();\n            const newCurrentCounting = (this.state.currentCounting === 'Work') ? 'Break' : 'Work';\n            const newTimeLeft = (this.state.currentCounting === 'Work') ? this.state.breakLength * 60 : this.state.workLength * 60;\n\n            document.getElementById('time-left').style.color = null;\n            this.setState({\n                timeLeft: newTimeLeft,\n                currentCounting: newCurrentCounting,\n            });\n            this.intervalID = setInterval(() => { this.tick() }, 1000);\n\n            // update currentTask progress\n            if (this.props.currentTask && newCurrentCounting === 'Break') {\n                this.props.updateTaskProgress(this.props.currentTask.id);\n            }\n            return;\n        };\n\n\n\n        this.setState({\n            timeLeft: this.state.timeLeft - 1\n        });\n\n        document.getElementsByTagName('title')[0].text = `(${this.clockify(this.state.timeLeft)}) Pomodoro Clock`;\n\n    }\n\n    handleStartToggle() {\n        const audio = document.getElementById('beep');\n        audio.play();\n        audio.pause();\n        audio.currentTime = 0;\n        if (!this.state.counting) {\n            this.intervalID = setInterval(() => { this.tick() }, 1000);\n        } else {\n            clearInterval(this.intervalID);\n        }\n\n        this.setState(state => ({\n            counting: !this.state.counting,\n        }));\n\n    }\n\n    clockify(timeInSecs) {\n        let minutes = Math.floor(timeInSecs / 60);\n        let seconds = timeInSecs - 60 * minutes;\n        // insure mm:ss format at any time\n        seconds = (seconds < 10) ? '0' + seconds : seconds;\n        minutes = (minutes < 10) ? '0' + minutes : minutes;\n\n        return minutes + ':' + seconds\n    }\n\n    render() {\n\n        const controlPanelList = ['Break', 'Work'].map((v) => (\n            <ControlPanel\n                value={v}\n                key={`${v}-panel`}\n                currentCounting={this.state.currentCounting}\n                length={(v === 'Break') ? this.state.breakLength : this.state.workLength}\n                handleInDecrement={this.handleInDecrement}\n                handleDefaultBtn={this.handleDefaultBtn}\n                lang={this.props.lang}\n                LANG_MAP={this.props.LANG_MAP}\n            />\n        ));\n        return (\n            <div id='pomodoro-panel'>\n                <h1>{(this.props.lang === 'en') ? 'Pomodoro' : this.props.LANG_MAP['Pomodoro']}</h1>\n                <DisplayPanel\n                    timeLeft={this.clockify(this.state.timeLeft)}\n                    handleReset={this.handleReset}\n                    currentCounting={this.state.currentCounting}\n                    lang={this.props.lang}\n                    LANG_MAP={this.props.LANG_MAP}\n                    handleStartToggle={this.handleStartToggle}\n                    counting={this.state.counting}\n                    currentTask={this.props.currentTask}\n                />\n                <div id='control-panels-group' className='btn-group'>\n                    {controlPanelList}\n                </div>\n                <audio id=\"beep\" preload=\"auto\" src=\"https://raw.githubusercontent.com/tsunghao-huang/react-pomodoro/gh-pages/homeland.mp3\"></audio>\n            </div>\n\n        )\n    }\n}\n\nexport default Pomodoro;","import React, { useState } from \"react\";\n\nfunction Form(props) {\n    const [name, setName] = useState(\"\");\n    const [targetSessions, setTargetSessions] = useState(\"\");\n\n    function handleChange(e) {\n        if (e.target.id === 'new-todo-input') {\n            setName(e.target.value);\n        } else if (e.target.id === 'new-todo-target-pomodoro') {\n            setTargetSessions(e.target.value);\n        }\n\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        if (name.replace(/\\s*/, \"\") === \"\") return;\n        props.addTask(name, targetSessions);\n        setName(\"\");\n        setTargetSessions(\"\");\n        const newTodoInput = document.getElementById('new-todo-input');\n        newTodoInput.focus();\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <h2 className=\"label-wrapper\">\n                <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n                    {(props.lang === 'en') ? 'What needs to be done?'\n                        : props.LANG_MAP['What needs to be done?']}\n                </label>\n            </h2>\n            <fieldset id=\"new-todo-fieldset\">\n                <input\n                    type=\"text\"\n                    id=\"new-todo-input\"\n                    className=\"input input__lg\"\n                    name=\"text\"\n                    autoComplete=\"off\"\n                    value={name}\n                    onChange={handleChange}\n                    required={true}\n                    placeholder={`${(props.lang === 'en') ? 'Todo' : props.LANG_MAP['Todo']}?`}\n                />\n                <input\n                    type=\"number\"\n                    id=\"new-todo-target-pomodoro\"\n                    className=\"input input__lg\"\n                    value={targetSessions}\n                    onChange={handleChange}\n                    min=\"0\"\n                    max=\"57\"\n                    placeholder={`${(props.lang === 'en') ? 'Target Pomodoros' : props.LANG_MAP['Target Pomodoros']}?`}\n                />\n            </fieldset>\n\n            <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n                {(props.lang === 'en') ? 'Add' : props.LANG_MAP['Add']}\n            </button>\n        </form>\n    );\n}\n\nexport default Form;","import React from \"react\";\n\nfunction FilterButton(props) {\n    return (\n        <button\n            type=\"button\"\n            className=\"btn toggle-btn\"\n            aria-pressed={props.isPressed}\n            onClick={() => props.setFilter(props.name)}\n        >\n            <span className=\"visually-hidden\">Show </span>\n            <span>{(props.lang === 'en') ? props.name : props.LANG_MAP[props.name]} </span>\n            <span className=\"visually-hidden\"> tasks</span>\n        </button>\n    );\n}\n\nexport default FilterButton;","import { useRef, useEffect } from 'react';\n\nexport default function usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}","import React, { useState, useRef, useEffect } from \"react\";\nimport usePrevious from \"./utils\";\n\nexport default function Todo(props) {\n\n    const editFieldRef = useRef(null);\n    const editButtonRef = useRef(null);\n\n    const [isEditing, setEditing] = useState(false);\n    const [newName, setNewName] = useState(props.name);\n    const [newTargetPomodoros, setNewTargetPomodoros] = useState(props.targetPomodoros);\n    const [newCompletedPomodoros, setNewCompletedPomodoros] = useState(props.completedPomodoros);\n    const wasEditing = usePrevious(isEditing);\n\n    function handleChange(e) {\n        e.stopPropagation();\n        if (e.target.id.includes('completed-pomodoros')) {\n            setNewCompletedPomodoros(e.target.value);\n        } else if (e.target.id.includes('target-pomodoros')) {\n            setNewTargetPomodoros(e.target.value);\n        } else {\n            setNewName(e.target.value);\n        }\n    }\n\n    function handleSubmit(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        if (newName.replace(/\\s*/, \"\") === \"\") return;\n        props.editTask(props.id, newName, newCompletedPomodoros, newTargetPomodoros);\n        setEditing(false);\n    }\n\n    function setEditingAndPreventBubbling(e, b) {\n        e.stopPropagation();\n        setEditing(b);\n    }\n\n    const editingTemplate = (\n        <form className=\"stack-small\">\n            <div className=\"form-group\">\n                <fieldset className=\"todo-fieldset\">\n                    <label className=\"todo-label\" htmlFor={props.id}>\n                        {(props.lang === 'en') ? `New name for ${props.name}` : `${props.name} 的新名字`}\n                    </label>\n                    <input\n                        id={props.id}\n                        className=\"input input__lg edit-todo-name\"\n                        type=\"text\"\n                        value={newName}\n                        onChange={handleChange}\n                        ref={editFieldRef}\n                        required={true}\n                    />\n                    <div className='edit-todo-pomodoros'>\n                        <label className=\"todo-label todo-label-pomodoros\" htmlFor={`${props.id}-completed-pomodoros`}>\n                            {(props.lang === 'en') ? 'Completed Pomodoros' : props.LANG_MAP['Completed Pomodoros']}\n                        </label>\n                        <input\n                            id={`${props.id}-completed-pomodoros`}\n                            className=\"input input__lg edit-todo-completed-pomodoros\"\n                            type=\"number\"\n                            value={newCompletedPomodoros}\n                            onChange={handleChange}\n                            min=\"0\"\n                            max={newTargetPomodoros}\n                            placeholder=\"Pomodoros?\"\n                        />\n                    </div>\n                    <div className='edit-todo-pomodoros'>\n                        <label className=\"todo-label todo-label-pomodoros\" htmlFor={`${props.id}-target-pomodoros`}>\n                            {(props.lang === 'en') ? 'Target Pomodoros' : props.LANG_MAP['Target Pomodoros']}\n                        </label>\n                        <input\n                            id={`${props.id}-target-pomodoros`}\n                            className=\"input input__lg edit-todo-target-pomodoros\"\n                            type=\"number\"\n                            value={newTargetPomodoros}\n                            onChange={handleChange}\n                            min={newCompletedPomodoros}\n                            max=\"57\"\n                            placeholder=\"Pomodoros?\"\n                        />\n                    </div>\n                </fieldset>\n\n            </div>\n            <div className=\"todo-btn-group\">\n                <button\n                    type=\"button\"\n                    className=\"btn todo-cancel\"\n                    onClick={(e) => setEditingAndPreventBubbling(e, false)}\n                >\n                    <i className=\"fas fa-times\" aria-hidden=\"true\"></i>\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Cancel' : props.LANG_MAP['Cancel']}\n                        renaming {props.name}\n                    </span>\n                </button>\n                <button\n                    type=\"submit\"\n                    className=\"btn btn__primary todo-edit\"\n                    onClick={(e) => handleSubmit(e)}\n                >\n                    <i className=\"far fa-save\" aria-hidden=\"true\"></i>\n\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Save' : props.LANG_MAP['Save']}\n                        new name for {props.name}\n                    </span>\n                </button>\n            </div>\n        </form>\n    );\n    const viewTemplate = (\n        <div className=\"stack-small\">\n            <div className=\"c-cb\">\n                <button\n                    type=\"button\"\n                    className=\"btn check-btn\"\n                    onClick={(e) => props.toggleTaskCompleted(e, props.id)}\n                >\n                    <i className={`${props.completed ? \"fas fa-check-circle\" : \"far fa-circle\"}`} aria-hidden=\"true\"></i>\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Edit' : props.LANG_MAP['Edit']}\n                        {props.name}\n                    </span>\n                </button>\n                <div className={`todo-label ${props.completed ? \"todo-label-checked\" : \"\"}`} htmlFor={props.id}>\n                    <span className=\"todo-label-name\">{props.name}</span>\n                    <span className=\"todo-label-progress\">{(props.targetPomodoros === 0 | props.targetPomodoros === \"\") ? '' : `${(props.lang === 'en') ? 'Progress' : props.LANG_MAP['Progress']}: ${props.completedPomodoros ? props.completedPomodoros : 0}/${props.targetPomodoros}`}</span>\n                </div>\n            </div>\n            <div className=\"todo-btn-group\">\n                <button\n                    type=\"button\"\n                    className=\"btn btn__danger\"\n                    onClick={(e) => props.deleteTask(e, props.id)}\n                >\n                    <i className=\"fas fa-trash-alt\" aria-hidden=\"true\"></i>\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Delete' : props.LANG_MAP['Delete']}\n                        {props.name}\n                    </span>\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn\"\n                    onClick={(e) => setEditingAndPreventBubbling(e, true)}\n                    ref={editButtonRef}\n                >\n                    <i className=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i>\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Edit' : props.LANG_MAP['Edit']}\n                        {props.name}\n                    </span>\n                </button>\n            </div>\n        </div>\n    );\n\n    useEffect(() => {\n        if (!wasEditing && isEditing) {\n            editFieldRef.current.select();\n            editFieldRef.current.focus();\n            // initiated value for the input field\n            setNewName(props.name);\n            setNewCompletedPomodoros(props.completedPomodoros);\n            setNewTargetPomodoros(props.targetPomodoros);\n        }\n        if (wasEditing && !isEditing) {\n            editButtonRef.current.focus();\n        }\n\n    }, [wasEditing, isEditing, props.name, props.completedPomodoros, props.targetPomodoros]);\n\n    return (\n        <li\n            id={`li-${props.id}`}\n            className={`todo stack-small ${props.current ? \"todo-selected\" : \"\"}`}\n            onClick={() => props.updateCurrentTask(props.id)}\n        >\n            {isEditing ? editingTemplate : viewTemplate}\n        </li>\n    );\n}","import React, { useState, useRef, useEffect } from 'react';\nimport \"./TodoApp.css\";\nimport Form from \"./TodoApp-sub/Form\";\nimport FilterButton from \"./TodoApp-sub/FilterButton\";\nimport Todo from \"./TodoApp-sub/Todo\";\nimport { nanoid } from \"nanoid\";\nimport usePrevious from \"./TodoApp-sub/utils\";\n\nconst FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nexport default function TodoApp(props) {\n\n    // const localStorageKey = 'localTodo';\n    // if (localStorage.getItem(localStorageKey) === null) {\n    //     localStorage.setItem(localStorageKey, JSON.stringify(props.tasks));\n    // }\n    // const localTodo = JSON.parse(localStorage.getItem(localStorageKey));\n    // const [tasks, setTasks] = useState(localTodo);\n\n\n    // function updateLocalStorage(updatedTodos) {\n    //     localStorage.setItem(localStorageKey, JSON.stringify(updatedTodos));\n    //     return;\n    // }\n    // const [tasks, setTasks] = useState(props.tasks);\n    const tasks = props.tasks;\n\n    const [filter, setFilter] = useState('All');\n\n    function addTask(name, targetPomodoros) {\n        const sanitizedName = name.replace(/(^\\s*)|(\\s*$)/g, \"\");\n        const newTask = {\n            id: \"todo-\" + nanoid(),\n            name: sanitizedName,\n            completed: false,\n            completedPomodoros: 0,\n            targetPomodoros: (targetPomodoros === \"\") ? 0 : parseInt(targetPomodoros)\n        };\n        props.setTasks([...tasks, newTask]);\n    }\n\n    function toggleTaskCompleted(e, id) {\n        e.stopPropagation();\n        const updatedTasks = tasks\n            .map(task => {\n                // if this task has the same ID as the edited task\n                if (id === task.id) {\n                    // use object spread to make a new obj\n                    // whose `completed` prop has been inverted\n                    return { ...task, completed: !task.completed }\n                }\n                return task;\n            })\n            .map(task => { // update completedPomodoros with toggle\n                if (task.completed) {\n                    return { ...task, completedPomodoros: parseInt(task.targetPomodoros) };\n                } else if (task.completedPomodoros === task.targetPomodoros) {\n                    // task not completed but have the same completed & target pomodoros\n                    // reset completedPomodoros to 0;\n                    return { ...task, completedPomodoros: 0 };\n                }\n                return task;\n            })\n        props.setTasks(updatedTasks);\n    }\n\n    function updateCurrentTask(id) {\n        const updatedTasks = tasks.map((task) => {\n            if (id === task.id) {\n                return { ...task, current: true };\n            } else {\n                return { ...task, current: false };\n            }\n        })\n        props.setTasks(updatedTasks);\n    }\n\n    function deleteTask(e, id) {\n        e.stopPropagation();\n        const remainingTasks = tasks.filter(task => id !== task.id);\n        props.setTasks(remainingTasks);\n    }\n\n    function editTask(id, newName, newCompletedPomodoros, newTargetPomodoros) {\n        const sanitizedNewName = newName.replace(/(^\\s*)|(\\s*$)/g, \"\");\n        const editedTaskList = tasks\n            .map(task => {\n                // if this task has the same ID as the edited task\n                if (id === task.id) {\n                    //\n                    return {\n                        ...task,\n                        ...{\n                            name: sanitizedNewName,\n                            completedPomodoros: (newCompletedPomodoros === \"\") ? 0 : parseInt(newCompletedPomodoros),\n                            targetPomodoros: (newTargetPomodoros === \"\") ? 0 : parseInt(newTargetPomodoros)\n                        }\n                    };\n                }\n                return task;\n            })\n            .map(task => { // validate target & completed pomodoros\n                if ((task.targetPomodoros !== 0) && (task.targetPomodoros === task.completedPomodoros)) {\n                    return { ...task, completed: true }\n                } else if ((task.targetPomodoros !== 0) && (task.targetPomodoros !== task.completedPomodoros)) {\n                    return { ...task, completed: false }\n                } else {\n                    return task;\n                }\n            })\n\n        props.setTasks(editedTaskList);\n    }\n\n    const taskList = tasks\n        .filter(FILTER_MAP[filter])\n        .map(task => (\n            <Todo\n                id={task.id}\n                name={task.name}\n                completed={task.completed}\n                key={task.id}\n                toggleTaskCompleted={toggleTaskCompleted}\n                deleteTask={deleteTask}\n                editTask={editTask}\n                lang={props.lang}\n                LANG_MAP={props.LANG_MAP}\n                completedPomodoros={task.completedPomodoros}\n                targetPomodoros={task.targetPomodoros}\n                updateCurrentTask={updateCurrentTask}\n                current={task.current}\n            />\n        ));\n\n    const filterList = FILTER_NAMES.map(name => (\n        <FilterButton\n            key={name}\n            name={name}\n            isPressed={name === filter}\n            setFilter={setFilter}\n            lang={props.lang}\n            LANG_MAP={props.LANG_MAP}\n        />\n    ));\n\n    const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n    let headingText;\n\n    if (props.lang === 'en') {\n        switch (filter) {\n            case 'All':\n                headingText = `${taskList.length} ${tasksNoun} in total`;\n                break;\n            default:\n                headingText = `${taskList.length} ${tasksNoun} ${filter.toLowerCase()}`;\n        }\n\n    } else {\n        headingText = `${props.LANG_MAP[filter]} ${taskList.length} 件事`;\n    }\n\n    const listHeadingRef = useRef(null);\n    const prevTaskLength = usePrevious(tasks.length);\n\n    useEffect(() => {\n        if (tasks.length - prevTaskLength === -1) {\n            listHeadingRef.current.focus();\n        }\n    }, [tasks.length, prevTaskLength]);\n\n    return (\n        <div id=\"todoapp\" className=\"stack-large\">\n            <h1>{(props.lang === 'en') ? 'Todos' : props.LANG_MAP['Todos']}</h1>\n            <Form addTask={addTask} lang={props.lang} LANG_MAP={props.LANG_MAP} />\n            <div className=\"filters btn-group stack-exception\">\n                {filterList}\n            </div>\n            <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n                {headingText}\n            </h2>\n            <ul\n                role=\"list\"\n                className=\"todo-list stack-large stack-exception\"\n                aria-labelledby=\"list-heading\"\n            >\n                {taskList}\n\n            </ul>\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Pomodoro from './components/Pomodoro';\nimport TodoApp from './components/TodoApp';\n\nconst DATA = [\n    { id: \"todo-0\", name: \"Eat\", completed: true, completedPomodoros: 2, targetPomodoros: 2, current: true },\n    { id: \"todo-1\", name: \"Sleep\", completed: false, completedPomodoros: 0, targetPomodoros: 0, current: false },\n    { id: \"todo-2\", name: \"Repeat\", completed: false, completedPomodoros: 0, targetPomodoros: 0, current: false }\n];\n\nconst LANG_MAP = {\n    'Pomodoro': '蕃 茄 鐘',\n    Work: '工 作',\n    Break: '休 息',\n    Todos: '待辦事項',\n    Todo: '待辦事項',\n    'What needs to be done?': '有事嗎？',\n    Add: '新增',\n    All: '全部',\n    Active: '待辦',\n    Completed: '完成',\n    Edit: '編輯',\n    Delete: '刪除',\n    Check: '標記完成',\n    Cancel: '取消',\n    Save: '儲存',\n    Progress: '進度',\n    'Target Pomodoros': '目標番茄數',\n    'Completed Pomodoros': '完成番茄數'\n};\n\nfunction App() {\n\n    const localStorageKey = 'localTodo';\n    if (localStorage.getItem(localStorageKey) === null) {\n        localStorage.setItem(localStorageKey, JSON.stringify(DATA));\n    }\n    const localTodo = JSON.parse(localStorage.getItem(localStorageKey));\n\n    const [tasks, setTasks] = useState(localTodo);\n    const [lang, setLang] = useState('en');\n    const [currentTask, setCurrentTask] = useState(tasks.filter(t => t.current)[0]);\n\n    function updateLocalStorage(updatedTodos) {\n        localStorage.setItem(localStorageKey, JSON.stringify(updatedTodos));\n        return;\n    }\n\n    useEffect(() => {\n        updateLocalStorage(tasks);\n        setCurrentTask(tasks.filter(t => t.current)[0]);\n    }, [tasks]);\n\n    useEffect(() => {\n        document.documentElement.setAttribute('lang', lang);\n    }, [lang]);\n\n    function handleLanguage() {\n        (lang === 'en') ? setLang('zh-TW') : setLang('en');\n    }\n\n    function updateTaskProgress(id) {\n        const newTaskList = tasks\n            .map(task => {\n                // if this task has the same ID as the edited task\n                if (id === task.id && task.completedPomodoros !== task.targetPomodoros) {\n                    return {\n                        ...task,\n                        ...{\n                            completedPomodoros: task.completedPomodoros + 1\n                        }\n                    };\n                }\n                return task;\n            })\n            .map(task => {\n                // validate target & completed sessions\n                if ((task.targetPomodoros !== 0) && (task.targetPomodoros === task.completedPomodoros)) {\n                    return { ...task, completed: true }\n                } else if ((task.targetPomodoros !== 0) && (task.targetPomodoros !== task.completedPomodoros)) {\n                    return { ...task, completed: false }\n                } else {\n                    return task;\n                }\n            })\n        setTasks(newTaskList);\n    }\n\n    return (\n        <div id=\"App\">\n            <button aria-label={`switch language to ${(lang === 'en') ? 'Mandarin' : 'English'}`} id='language-btn' onClick={handleLanguage}>{(lang === 'en') ? '繁體中文' : 'English'}</button>\n            <Pomodoro\n                lang={lang}\n                LANG_MAP={LANG_MAP}\n                currentTask={currentTask}\n                updateTaskProgress={updateTaskProgress}\n            />\n            <TodoApp\n                tasks={tasks}\n                lang={lang}\n                LANG_MAP={LANG_MAP}\n                setTasks={setTasks}\n            />\n        </div>\n\n    )\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}