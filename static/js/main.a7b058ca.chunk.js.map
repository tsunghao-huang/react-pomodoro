{"version":3,"sources":["components/Pomodoro-sub/DefaultBtn.js","components/Pomodoro-sub/DisplayPanel.js","components/TodoApp-sub/utils.js","components/Pomodoro-sub/TimerForm.js","components/Pomodoro.js","components/TodoApp-sub/Form.js","components/TodoApp-sub/FilterButton.js","components/TodoApp-sub/Todo.js","components/TodoApp.js","index.js"],"names":["DefaultBtn","props","className","aria-pressed","currentCounting","value","aria-label","toLowerCase","id","onClick","handleDefaultBtn","lang","LANG_MAP","DisplayPanel","englishHeading","currentTask","name","mandarinHeading","replace","role","timeLeft","handleStartToggle","counting","handleReset","usePrevious","ref","useRef","useEffect","current","TimerForm","useState","isEditing","setIsEditing","parseInt","breakLength","newBreakLength","setNewBreakLength","workLength","newWorkLength","setNewWorkLength","modal","editBreakLegnthRef","setTimerBtnRef","wasEditing","closeModal","style","display","handleChange","e","target","focus","window","onclick","event","htmlFor","type","min","max","onChange","required","aria-hidden","preventDefault","handleTimerFormSubmit","handleSubmit","Pomodoro","state","english","bind","clockify","tick","handleInDecrement","handleLanguage","this","setState","document","documentElement","setAttribute","clearInterval","intervalID","audio","getElementById","pause","currentTime","color","getElementsByTagName","text","includes","currentTarget","play","newCurrentCounting","newTimeLeft","setInterval","updateTaskProgress","timeInSecs","minutes","Math","floor","seconds","defaultBtnLists","map","v","key","length","preload","src","React","Component","Form","setName","targetSessions","setTargetSessions","onSubmit","addTask","autoComplete","placeholder","FilterButton","isPressed","setFilter","Todo","editFieldRef","editButtonRef","setEditing","newName","setNewName","targetPomodoros","newTargetPomodoros","setNewTargetPomodoros","completedPomodoros","newCompletedPomodoros","setNewCompletedPomodoros","stopPropagation","setEditingAndPreventBubbling","b","editingTemplate","editTask","viewTemplate","toggleTaskCompleted","completed","deleteTask","select","updateCurrentTask","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","TodoApp","tasks","filter","updatedTasks","setTasks","remainingTasks","sanitizedNewName","editedTaskList","headingText","taskList","filterList","tasksNoun","listHeadingRef","prevTaskLength","sanitizedName","newTask","nanoid","tabIndex","aria-labelledby","DATA","Work","Break","Todos","Add","Edit","Delete","Check","Cancel","Save","Progress","App","localStorage","getItem","setItem","JSON","stringify","localTodo","parse","setLang","t","setCurrentTask","updatedTodos","newTaskList","ReactDOM","render"],"mappings":"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","file":"static/js/main.a7b058ca.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function DefaultBtn(props) {\n    return (\n        <button\n            className='btn toggle-btn'\n            aria-pressed={props.currentCounting === props.value}\n            aria-label={`set ${props.value.toLowerCase()} to default duration.`}\n            id={`default-${props.value.toLowerCase()}`}\n            onClick={props.handleDefaultBtn}\n        >\n            {(props.lang === 'en') ? props.value : props.LANG_MAP[props.value]}\n        </button>\n    )\n}","import React from 'react';\n\nexport default function DisplayPanel(props) {\n    const englishHeading = (\n        <p id='pomodoro-heading'>Time to {props.currentCounting} {(props.currentTask) ? `${props.currentCounting === 'Work' ? 'on' : 'from'} ${props.currentTask.name}` : \"\"}</p>\n    )\n\n    const mandarinHeading = (\n        <p id='pomodoro-heading'>{(props.currentTask) ? `${props.currentTask.name} 的` : \"\"}{props.LANG_MAP[props.currentCounting].replace(' ', '')}時間</p>\n    )\n\n    return (\n        <div id='display-panel' aria-label=\"display panel\">\n            {/* <p id='timer-label' aria-label={`Currently counting for ${props.currentCounting}`}>{(props.lang === 'en') ? props.currentCounting : props.LANG_MAP[props.currentCounting]}</p> */}\n            {(props.lang === 'en') ? englishHeading : mandarinHeading}\n            <p id='time-left' role='timer' aria-label={`Duration for ${props.currentCounting}`}>{props.timeLeft}</p>\n\n            <div id='display-btn-group'>\n                <button\n                    aria-label={`start ${props.currentCounting}`} id=\"start_stop\" onClick={props.handleStartToggle} className='btn-level'>\n                    <i className={`fas ${props.counting ? \"fa-pause\" : \"fa-play\"} fa-3x`}></i>\n                </button>\n                <button aria-label={`reset to work, 25 minutes.`} id=\"reset\" onClick={props.handleReset} className='btn-level'>\n                    <i className=\"fas fa-redo fa-3x\"></i>\n                </button>\n            </div>\n\n        </div>\n    )\n}","import { useRef, useEffect } from 'react';\n\nexport default function usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}","import React, { useRef, useState, useEffect } from 'react';\nimport usePrevious from \"../TodoApp-sub/utils\";\n\nexport default function TimerForm(props) {\n\n    const [isEditing, setIsEditing] = useState(false);\n    const [newBreakLength, setNewBreakLength] = useState(parseInt(props.breakLength));\n    const [newWorkLength, setNewWorkLength] = useState(parseInt(props.workLength));\n\n    useEffect(() => {\n        setNewWorkLength(props.workLength);\n        setNewBreakLength(props.breakLength);\n    }, [props.breakLength, props.workLength])\n\n    // Get the modal\n    const modal = useRef(null);\n    const editBreakLegnthRef = useRef(null);\n    const setTimerBtnRef = useRef(null);\n    const wasEditing = usePrevious(isEditing);\n\n    useEffect(() => {\n        if (!wasEditing && isEditing) {\n            editBreakLegnthRef.current.focus();\n            setNewWorkLength(props.workLength);\n            setNewBreakLength(props.breakLength);\n        } else if (wasEditing && !isEditing) {\n            setTimerBtnRef.current.focus();\n        }\n    }, [isEditing, wasEditing, props.workLength, props.breakLength])\n\n    function openModal() {\n        // When the user clicks on the button, open the modal\n        if (props.counting) return;\n        setIsEditing(!isEditing);\n        modal.current.style.display = \"block\";\n    }\n\n    function closeModal() {\n        // When the user clicks on <span> (x), close the modal\n        setIsEditing(!isEditing);\n        modal.current.style.display = \"none\";\n    }\n\n    function handleChange(e) {\n        if (e.target.id === 'new-break-length') {\n            setNewBreakLength(e.target.value);\n        } else if (e.target.id === 'new-work-length') {\n            setNewWorkLength(e.target.value);\n        }\n\n    }\n\n    function handleSubmit(e) {\n        const max = 60;\n        const min = 1;\n        e.preventDefault();\n\n        if (newBreakLength < min | newBreakLength > max | newWorkLength < min | newWorkLength > max) {\n            return;\n        } else {\n            props.handleTimerFormSubmit(newBreakLength, newWorkLength);\n            closeModal();\n        }\n\n    }\n\n    // When the user clicks anywhere outside of the modal, close it\n    window.onclick = function (event) {\n        if (event.target === modal.current) {\n            modal.current.style.display = \"none\";\n        }\n    }\n\n    return (\n        <div className=\"default-form-modal\">\n            <button\n                id=\"set-timer-btn\"\n                className=\"btn\"\n                onClick={openModal}\n                ref={setTimerBtnRef}\n            >\n                <i className=\"fas fa-cog\"></i>\n            </button>\n            <div id=\"myModal\" className=\"modal\" ref={modal}>\n                <div className=\"modal-content\">\n                    <form id=\"timer-form\">\n                        <h2>Timer Setting (minutes)</h2>\n                        <fieldset>\n                            <label htmlFor=\"new-break-length\">Break</label>\n                            <input\n                                id=\"new-break-length\"\n                                type=\"number\"\n                                min=\"1\"\n                                max=\"60\"\n                                value={newBreakLength}\n                                onChange={handleChange}\n                                ref={editBreakLegnthRef}\n                                required=\"true\"\n                            />\n                        </fieldset>\n                        <fieldset>\n                            <label htmlFor=\"new-work-length\">Work</label>\n                            <input\n                                id=\"new-work-length\"\n                                type=\"number\"\n                                min=\"1\"\n                                max=\"60\"\n                                value={newWorkLength}\n                                onChange={handleChange}\n                                required=\"true\"\n                            />\n                        </fieldset>\n\n                        <div id=\"timer-form-btn-group\">\n                            <button\n                                id=\"timer-form-cancel\"\n                                type=\"button\"\n                                className=\"btn timer-form-btns\"\n                                onClick={closeModal}\n                            >\n                                <i className=\"fas fa-times\" aria-hidden=\"true\"></i>\n                                {/* <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Cancel' : props.LANG_MAP['Cancel']}\n                        renaming {props.name}\n                    </span> */}\n                            </button>\n                            <button\n                                id=\"timer-form-save\"\n                                type=\"submit\"\n                                className=\"btn timer-form-btns\"\n                                onClick={(e) => handleSubmit(e)}\n                            >\n                                <i className=\"far fa-save\" aria-hidden=\"true\"></i>\n\n                                {/* <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Save' : props.LANG_MAP['Save']}\n                        new name for {props.name}\n                    </span> */}\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport DefaultBtn from './Pomodoro-sub/DefaultBtn';\nimport DisplayPanel from './Pomodoro-sub/DisplayPanel';\nimport TimerForm from './Pomodoro-sub/TimerForm';\n\nclass Pomodoro extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            breakLength: 5,\n            workLength: 25,\n            timeLeft: 1500,\n            counting: false,\n            currentCounting: 'Work',\n            english: true\n        };\n        this.handleReset = this.handleReset.bind(this);\n        this.clockify = this.clockify.bind(this);\n        this.handleStartToggle = this.handleStartToggle.bind(this);\n        this.tick = this.tick.bind(this);\n        this.handleInDecrement = this.handleInDecrement.bind(this);\n        this.handleDefaultBtn = this.handleDefaultBtn.bind(this);\n        this.handleLanguage = this.handleLanguage.bind(this);\n        this.handleTimerFormSubmit = this.handleTimerFormSubmit.bind(this);\n    }\n\n    handleLanguage() {\n        this.setState({\n            english: !this.state.english\n        });\n        if (this.state.english) {\n            document.documentElement.setAttribute('lang', 'zh-TW');\n        } else {\n            document.documentElement.setAttribute('lang', 'en');\n        }\n    }\n\n    handleReset() {\n        this.setState({\n            breakLength: 5,\n            workLength: 25,\n            timeLeft: 1500,\n            counting: false,\n            currentCounting: 'Work',\n        });\n        // reset should stop the timer as well\n        clearInterval(this.intervalID);\n\n        // and the audio\n        const audio = document.getElementById('beep');\n        audio.pause();\n        audio.currentTime = 0;\n\n        // and set the color back to default, if it is changed\n        document.getElementById('time-left').style.color = null;\n\n        // and the title\n        document.getElementsByTagName('title')[0].text = 'Pomodoro Clock';\n    }\n\n    handleDefaultBtn(e) {\n        // ignore click, while the clock is counting\n        if (this.state.counting) return;\n        // console.log(e.target.id);\n        if (e.target.id.includes('work')) {\n            this.setState({\n                // workLength: 25,\n                timeLeft: this.state.workLength * 60,\n                counting: false,\n                currentCounting: 'Work',\n            });\n        } else {\n            this.setState({\n                // breakLength: 5,\n                timeLeft: this.state.breakLength * 60,\n                counting: false,\n                currentCounting: 'Break',\n            });\n        }\n    }\n\n    handleInDecrement(e) {\n        // in case the clock is still running, disable handleInDecrement()\n        if (this.state.counting) return;\n        switch (`${e.currentTarget.id},current:${this.state.currentCounting}`) {\n            case 'break-decrement,current:Work':\n                if (this.state.breakLength > 1) {\n                    this.setState(state => ({\n                        breakLength: state.breakLength - 1,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'break-increment,current:Work':\n                if (this.state.breakLength < 60) {\n                    this.setState(state => ({\n                        breakLength: state.breakLength + 1\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'break-decrement,current:Break':\n                if (this.state.breakLength > 1) {\n                    this.setState(state => ({\n                        breakLength: state.breakLength - 1,\n                        timeLeft: state.timeLeft - 60,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'break-increment,current:Break':\n                if (this.state.breakLength < 60) {\n                    this.setState(state => ({\n                        breakLength: state.breakLength + 1,\n                        timeLeft: state.timeLeft + 60,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'work-decrement,current:Work':\n                if (this.state.workLength > 1) {\n                    this.setState(state => ({\n                        workLength: state.workLength - 1,\n                        timeLeft: state.timeLeft - 60,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'work-increment,current:Work':\n                if (this.state.workLength < 60) {\n                    this.setState(state => ({\n                        workLength: state.workLength + 1,\n                        timeLeft: state.timeLeft + 60,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'work-decrement,current:Break':\n                if (this.state.workLength > 1) {\n                    this.setState(state => ({\n                        workLength: state.workLength - 1,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            case 'work-increment,current:Break':\n                if (this.state.workLength < 60) {\n                    this.setState(state => ({\n                        workLength: state.workLength + 1,\n                    }));\n                    return;\n                } else {\n                    return;\n                }\n            default:\n                return;\n\n        }\n\n    }\n\n    tick() {\n\n        // change color when time left <= 60\n        if (this.state.timeLeft <= 60) {\n            document.getElementById('time-left').style.color = \"#F8BFCE\";\n        } else {\n            document.getElementById('time-left').style.color = null;\n        }\n        if (this.state.timeLeft <= 0) {\n\n            clearInterval(this.intervalID);\n            const audio = document.getElementById('beep');\n            audio.play();\n            const newCurrentCounting = (this.state.currentCounting === 'Work') ? 'Break' : 'Work';\n            const newTimeLeft = (this.state.currentCounting === 'Work') ? this.state.breakLength * 60 : this.state.workLength * 60;\n\n            document.getElementById('time-left').style.color = null;\n            this.setState({\n                timeLeft: newTimeLeft,\n                currentCounting: newCurrentCounting,\n            });\n            this.intervalID = setInterval(() => { this.tick() }, 1000);\n\n            // update currentTask progress\n            if (this.props.currentTask && newCurrentCounting === 'Break') {\n                this.props.updateTaskProgress(this.props.currentTask.id);\n            }\n            return;\n        };\n\n\n\n        this.setState({\n            timeLeft: this.state.timeLeft - 1\n        });\n\n        document.getElementsByTagName('title')[0].text = `(${this.clockify(this.state.timeLeft)}) Pomodoro Clock`;\n\n    }\n\n    handleStartToggle() {\n        const audio = document.getElementById('beep');\n        audio.play();\n        audio.pause();\n        audio.currentTime = 0;\n        if (!this.state.counting) {\n            this.intervalID = setInterval(() => { this.tick() }, 1000);\n        } else {\n            clearInterval(this.intervalID);\n        }\n\n        this.setState(state => ({\n            counting: !this.state.counting,\n        }));\n\n    }\n\n    clockify(timeInSecs) {\n        let minutes = Math.floor(timeInSecs / 60);\n        let seconds = timeInSecs - 60 * minutes;\n        // insure mm:ss format at any time\n        seconds = (seconds < 10) ? '0' + seconds : seconds;\n        minutes = (minutes < 10) ? '0' + minutes : minutes;\n\n        return minutes + ':' + seconds\n    }\n\n    handleTimerFormSubmit(newBreakLength, newWorkLength) {\n        this.setState({\n            breakLength: parseInt(newBreakLength),\n            workLength: parseInt(newWorkLength),\n            timeLeft: parseInt(newWorkLength) * 60,\n            currentCounting: \"Work\"\n        });\n    }\n\n    render() {\n\n        const defaultBtnLists = ['Break', 'Work'].map((v) => (\n            <DefaultBtn\n                value={v}\n                key={`${v}-panel`}\n                currentCounting={this.state.currentCounting}\n                length={(v === 'Break') ? this.state.breakLength : this.state.workLength}\n                handleInDecrement={this.handleInDecrement}\n                handleDefaultBtn={this.handleDefaultBtn}\n                lang={this.props.lang}\n                LANG_MAP={this.props.LANG_MAP}\n            />\n        ));\n        return (\n            <div id='pomodoro-panel'>\n                <h1>{(this.props.lang === 'en') ? 'Pomodoro' : this.props.LANG_MAP['Pomodoro']}</h1>\n                <div id='panels-wrapper'>\n\n                    <DisplayPanel\n                        timeLeft={this.clockify(this.state.timeLeft)}\n                        handleReset={this.handleReset}\n                        currentCounting={this.state.currentCounting}\n                        lang={this.props.lang}\n                        LANG_MAP={this.props.LANG_MAP}\n                        handleStartToggle={this.handleStartToggle}\n                        counting={this.state.counting}\n                        currentTask={this.props.currentTask}\n                    />\n                    <div id='defaultBtns-group' className='btn-group'>\n                        {defaultBtnLists}\n                        <TimerForm\n                            breakLength={this.state.breakLength}\n                            workLength={this.state.workLength}\n                            handleTimerFormSubmit={this.handleTimerFormSubmit}\n                            counting={this.state.counting}\n                        />\n                    </div>\n\n                </div>\n                <audio id=\"beep\" preload=\"auto\" src=\"https://raw.githubusercontent.com/tsunghao-huang/react-pomodoro/gh-pages/homeland.mp3\"></audio>\n            </div>\n\n        )\n    }\n}\n\nexport default Pomodoro;","import React, { useState } from \"react\";\n\nfunction Form(props) {\n    const [name, setName] = useState(\"\");\n    const [targetSessions, setTargetSessions] = useState(\"\");\n\n    function handleChange(e) {\n        if (e.target.id === 'new-todo-input') {\n            setName(e.target.value);\n        } else if (e.target.id === 'new-todo-target-pomodoro') {\n            setTargetSessions(e.target.value);\n        }\n\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        if (name.replace(/\\s*/, \"\") === \"\") return;\n        props.addTask(name, targetSessions);\n        setName(\"\");\n        setTargetSessions(\"\");\n        const newTodoInput = document.getElementById('new-todo-input');\n        newTodoInput.focus();\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <h2 className=\"label-wrapper\">\n                <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n                    {(props.lang === 'en') ? 'What needs to be done?'\n                        : props.LANG_MAP['What needs to be done?']}\n                </label>\n            </h2>\n            <fieldset id=\"new-todo-fieldset\">\n                <input\n                    type=\"text\"\n                    id=\"new-todo-input\"\n                    className=\"input input__lg\"\n                    name=\"text\"\n                    autoComplete=\"off\"\n                    value={name}\n                    onChange={handleChange}\n                    required={true}\n                    placeholder={`${(props.lang === 'en') ? 'Todo' : props.LANG_MAP['Todo']}?`}\n                />\n                <input\n                    type=\"number\"\n                    id=\"new-todo-target-pomodoro\"\n                    className=\"input input__lg\"\n                    value={targetSessions}\n                    onChange={handleChange}\n                    min=\"0\"\n                    max=\"57\"\n                    placeholder={`${(props.lang === 'en') ? 'Target Pomodoros' : props.LANG_MAP['Target Pomodoros']}?`}\n                />\n            </fieldset>\n\n            <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n                {(props.lang === 'en') ? 'Add' : props.LANG_MAP['Add']}\n            </button>\n        </form>\n    );\n}\n\nexport default Form;","import React from \"react\";\n\nfunction FilterButton(props) {\n    return (\n        <button\n            type=\"button\"\n            className=\"btn toggle-btn\"\n            aria-pressed={props.isPressed}\n            onClick={() => props.setFilter(props.name)}\n        >\n            <span className=\"visually-hidden\">Show </span>\n            <span>{(props.lang === 'en') ? props.name : props.LANG_MAP[props.name]} </span>\n            <span className=\"visually-hidden\"> tasks</span>\n        </button>\n    );\n}\n\nexport default FilterButton;","import React, { useState, useRef, useEffect } from \"react\";\nimport usePrevious from \"./utils\";\n\nexport default function Todo(props) {\n\n    const editFieldRef = useRef(null);\n    const editButtonRef = useRef(null);\n\n    const [isEditing, setEditing] = useState(false);\n    const [newName, setNewName] = useState(props.name);\n    const [newTargetPomodoros, setNewTargetPomodoros] = useState(props.targetPomodoros);\n    const [newCompletedPomodoros, setNewCompletedPomodoros] = useState(props.completedPomodoros);\n    const wasEditing = usePrevious(isEditing);\n\n    function handleChange(e) {\n        e.stopPropagation();\n        if (e.target.id.includes('completed-pomodoros')) {\n            setNewCompletedPomodoros(e.target.value);\n        } else if (e.target.id.includes('target-pomodoros')) {\n            setNewTargetPomodoros(e.target.value);\n        } else {\n            setNewName(e.target.value);\n        }\n    }\n\n    function handleSubmit(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        if (newName.replace(/\\s*/, \"\") === \"\") return;\n        props.editTask(props.id, newName, newCompletedPomodoros, newTargetPomodoros);\n        setEditing(false);\n    }\n\n    function setEditingAndPreventBubbling(e, b) {\n        e.stopPropagation();\n        setEditing(b);\n    }\n\n    const editingTemplate = (\n        <form className=\"stack-small\">\n            <div className=\"form-group\">\n                <fieldset className=\"todo-fieldset\">\n                    <label className=\"todo-label\" htmlFor={props.id}>\n                        {(props.lang === 'en') ? `New name for ${props.name}` : `${props.name} 的新名字`}\n                    </label>\n                    <input\n                        id={props.id}\n                        className=\"input input__lg edit-todo-name\"\n                        type=\"text\"\n                        value={newName}\n                        onChange={handleChange}\n                        ref={editFieldRef}\n                        required={true}\n                    />\n                    <div className='edit-todo-pomodoros'>\n                        <label className=\"todo-label todo-label-pomodoros\" htmlFor={`${props.id}-completed-pomodoros`}>\n                            {(props.lang === 'en') ? 'Completed Pomodoros' : props.LANG_MAP['Completed Pomodoros']}\n                        </label>\n                        <input\n                            id={`${props.id}-completed-pomodoros`}\n                            className=\"input input__lg edit-todo-completed-pomodoros\"\n                            type=\"number\"\n                            value={newCompletedPomodoros}\n                            onChange={handleChange}\n                            min=\"0\"\n                            max={newTargetPomodoros}\n                            placeholder=\"Pomodoros?\"\n                        />\n                    </div>\n                    <div className='edit-todo-pomodoros'>\n                        <label className=\"todo-label todo-label-pomodoros\" htmlFor={`${props.id}-target-pomodoros`}>\n                            {(props.lang === 'en') ? 'Target Pomodoros' : props.LANG_MAP['Target Pomodoros']}\n                        </label>\n                        <input\n                            id={`${props.id}-target-pomodoros`}\n                            className=\"input input__lg edit-todo-target-pomodoros\"\n                            type=\"number\"\n                            value={newTargetPomodoros}\n                            onChange={handleChange}\n                            min={newCompletedPomodoros}\n                            max=\"57\"\n                            placeholder=\"Pomodoros?\"\n                        />\n                    </div>\n                </fieldset>\n\n            </div>\n            <div className=\"todo-btn-group\">\n                <button\n                    type=\"button\"\n                    className=\"btn todo-cancel\"\n                    onClick={(e) => setEditingAndPreventBubbling(e, false)}\n                >\n                    <i className=\"fas fa-times\" aria-hidden=\"true\"></i>\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Cancel' : props.LANG_MAP['Cancel']}\n                        renaming {props.name}\n                    </span>\n                </button>\n                <button\n                    type=\"submit\"\n                    className=\"btn btn__primary todo-edit\"\n                    onClick={(e) => handleSubmit(e)}\n                >\n                    <i className=\"far fa-save\" aria-hidden=\"true\"></i>\n\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Save' : props.LANG_MAP['Save']}\n                        new name for {props.name}\n                    </span>\n                </button>\n            </div>\n        </form>\n    );\n    const viewTemplate = (\n        <div className=\"stack-small\">\n            <div className=\"c-cb\">\n                <button\n                    type=\"button\"\n                    className=\"btn check-btn\"\n                    onClick={(e) => props.toggleTaskCompleted(e, props.id)}\n                >\n                    <i className={`${props.completed ? \"fas fa-check-circle\" : \"far fa-circle\"}`} aria-hidden=\"true\"></i>\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Edit' : props.LANG_MAP['Edit']}\n                        {props.name}\n                    </span>\n                </button>\n                <div className={`todo-label ${props.completed ? \"todo-label-checked\" : \"\"}`} htmlFor={props.id}>\n                    <span className=\"todo-label-name\">{props.name}</span>\n                    <span className=\"todo-label-progress\">{(props.targetPomodoros === 0 | props.targetPomodoros === \"\") ? '' : `${(props.lang === 'en') ? 'Progress' : props.LANG_MAP['Progress']}: ${props.completedPomodoros ? props.completedPomodoros : 0}/${props.targetPomodoros}`}</span>\n                </div>\n            </div>\n            <div className=\"todo-btn-group\">\n                <button\n                    type=\"button\"\n                    className=\"btn btn__danger\"\n                    onClick={(e) => props.deleteTask(e, props.id)}\n                >\n                    <i className=\"fas fa-trash-alt\" aria-hidden=\"true\"></i>\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Delete' : props.LANG_MAP['Delete']}\n                        {props.name}\n                    </span>\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn\"\n                    onClick={(e) => setEditingAndPreventBubbling(e, true)}\n                    ref={editButtonRef}\n                >\n                    <i className=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i>\n                    <span className=\"visually-hidden\">\n                        {(props.lang === 'en') ? 'Edit' : props.LANG_MAP['Edit']}\n                        {props.name}\n                    </span>\n                </button>\n            </div>\n        </div>\n    );\n\n    useEffect(() => {\n        if (!wasEditing && isEditing) {\n            editFieldRef.current.select();\n            editFieldRef.current.focus();\n            // initiated value for the input field\n            setNewName(props.name);\n            setNewCompletedPomodoros(props.completedPomodoros);\n            setNewTargetPomodoros(props.targetPomodoros);\n        }\n        if (wasEditing && !isEditing) {\n            editButtonRef.current.focus();\n        }\n\n    }, [wasEditing, isEditing, props.name, props.completedPomodoros, props.targetPomodoros]);\n\n    return (\n        <li\n            id={`li-${props.id}`}\n            className={`todo stack-small ${props.current ? \"todo-selected\" : \"\"}`}\n            onClick={() => props.updateCurrentTask(props.id)}\n        >\n            {isEditing ? editingTemplate : viewTemplate}\n        </li>\n    );\n}","import React, { useState, useRef, useEffect } from 'react';\nimport \"./TodoApp.css\";\nimport Form from \"./TodoApp-sub/Form\";\nimport FilterButton from \"./TodoApp-sub/FilterButton\";\nimport Todo from \"./TodoApp-sub/Todo\";\nimport { nanoid } from \"nanoid\";\nimport usePrevious from \"./TodoApp-sub/utils\";\n\nconst FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nexport default function TodoApp(props) {\n\n    // const localStorageKey = 'localTodo';\n    // if (localStorage.getItem(localStorageKey) === null) {\n    //     localStorage.setItem(localStorageKey, JSON.stringify(props.tasks));\n    // }\n    // const localTodo = JSON.parse(localStorage.getItem(localStorageKey));\n    // const [tasks, setTasks] = useState(localTodo);\n\n\n    // function updateLocalStorage(updatedTodos) {\n    //     localStorage.setItem(localStorageKey, JSON.stringify(updatedTodos));\n    //     return;\n    // }\n    // const [tasks, setTasks] = useState(props.tasks);\n    const tasks = props.tasks;\n\n    const [filter, setFilter] = useState('All');\n\n    function addTask(name, targetPomodoros) {\n        const sanitizedName = name.replace(/(^\\s*)|(\\s*$)/g, \"\");\n        const newTask = {\n            id: \"todo-\" + nanoid(),\n            name: sanitizedName,\n            completed: false,\n            completedPomodoros: 0,\n            targetPomodoros: (targetPomodoros === \"\") ? 0 : parseInt(targetPomodoros)\n        };\n        props.setTasks([...tasks, newTask]);\n    }\n\n    function toggleTaskCompleted(e, id) {\n        e.stopPropagation();\n        const updatedTasks = tasks\n            .map(task => {\n                // if this task has the same ID as the edited task\n                if (id === task.id) {\n                    // use object spread to make a new obj\n                    // whose `completed` prop has been inverted\n                    return { ...task, completed: !task.completed }\n                }\n                return task;\n            })\n            .map(task => { // update completedPomodoros with toggle\n                if (task.completed) {\n                    return { ...task, completedPomodoros: parseInt(task.targetPomodoros) };\n                } else if (task.completedPomodoros === task.targetPomodoros) {\n                    // task not completed but have the same completed & target pomodoros\n                    // reset completedPomodoros to 0;\n                    return { ...task, completedPomodoros: 0 };\n                }\n                return task;\n            })\n        props.setTasks(updatedTasks);\n    }\n\n    function updateCurrentTask(id) {\n        const updatedTasks = tasks.map((task) => {\n            if (id === task.id) {\n                return { ...task, current: true };\n            } else {\n                return { ...task, current: false };\n            }\n        })\n        props.setTasks(updatedTasks);\n    }\n\n    function deleteTask(e, id) {\n        e.stopPropagation();\n        const remainingTasks = tasks.filter(task => id !== task.id);\n        props.setTasks(remainingTasks);\n    }\n\n    function editTask(id, newName, newCompletedPomodoros, newTargetPomodoros) {\n        const sanitizedNewName = newName.replace(/(^\\s*)|(\\s*$)/g, \"\");\n        const editedTaskList = tasks\n            .map(task => {\n                // if this task has the same ID as the edited task\n                if (id === task.id) {\n                    //\n                    return {\n                        ...task,\n                        ...{\n                            name: sanitizedNewName,\n                            completedPomodoros: (newCompletedPomodoros === \"\") ? 0 : parseInt(newCompletedPomodoros),\n                            targetPomodoros: (newTargetPomodoros === \"\") ? 0 : parseInt(newTargetPomodoros)\n                        }\n                    };\n                }\n                return task;\n            })\n            .map(task => { // validate target & completed pomodoros\n                if ((task.targetPomodoros !== 0) && (task.targetPomodoros === task.completedPomodoros)) {\n                    return { ...task, completed: true }\n                } else if ((task.targetPomodoros !== 0) && (task.targetPomodoros !== task.completedPomodoros)) {\n                    return { ...task, completed: false }\n                } else {\n                    return task;\n                }\n            })\n\n        props.setTasks(editedTaskList);\n    }\n\n    const taskList = tasks\n        .filter(FILTER_MAP[filter])\n        .map(task => (\n            <Todo\n                id={task.id}\n                name={task.name}\n                completed={task.completed}\n                key={task.id}\n                toggleTaskCompleted={toggleTaskCompleted}\n                deleteTask={deleteTask}\n                editTask={editTask}\n                lang={props.lang}\n                LANG_MAP={props.LANG_MAP}\n                completedPomodoros={task.completedPomodoros}\n                targetPomodoros={task.targetPomodoros}\n                updateCurrentTask={updateCurrentTask}\n                current={task.current}\n            />\n        ));\n\n    const filterList = FILTER_NAMES.map(name => (\n        <FilterButton\n            key={name}\n            name={name}\n            isPressed={name === filter}\n            setFilter={setFilter}\n            lang={props.lang}\n            LANG_MAP={props.LANG_MAP}\n        />\n    ));\n\n    const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n    let headingText;\n\n    if (props.lang === 'en') {\n        switch (filter) {\n            case 'All':\n                headingText = `${taskList.length} ${tasksNoun} in total`;\n                break;\n            default:\n                headingText = `${taskList.length} ${tasksNoun} ${filter.toLowerCase()}`;\n        }\n\n    } else {\n        headingText = `${props.LANG_MAP[filter]} ${taskList.length} 件事`;\n    }\n\n    const listHeadingRef = useRef(null);\n    const prevTaskLength = usePrevious(tasks.length);\n\n    useEffect(() => {\n        if (tasks.length - prevTaskLength === -1) {\n            listHeadingRef.current.focus();\n        }\n    }, [tasks.length, prevTaskLength]);\n\n    return (\n        <div id=\"todoapp\" className=\"stack-large\">\n            <h1>{(props.lang === 'en') ? 'Todos' : props.LANG_MAP['Todos']}</h1>\n            <Form addTask={addTask} lang={props.lang} LANG_MAP={props.LANG_MAP} />\n            <div className=\"filters btn-group stack-exception\">\n                {filterList}\n            </div>\n            <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n                {headingText}\n            </h2>\n            <ul\n                role=\"list\"\n                className=\"todo-list stack-large stack-exception\"\n                aria-labelledby=\"list-heading\"\n            >\n                {taskList}\n\n            </ul>\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Pomodoro from './components/Pomodoro';\nimport TodoApp from './components/TodoApp';\n\nconst DATA = [\n    { id: \"todo-0\", name: \"Eat\", completed: true, completedPomodoros: 2, targetPomodoros: 2, current: true },\n    { id: \"todo-1\", name: \"Sleep\", completed: false, completedPomodoros: 0, targetPomodoros: 0, current: false },\n    { id: \"todo-2\", name: \"Repeat\", completed: false, completedPomodoros: 0, targetPomodoros: 0, current: false }\n];\n\nconst LANG_MAP = {\n    'Pomodoro': '蕃 茄 鐘',\n    Work: '工 作',\n    Break: '休 息',\n    Todos: '待辦事項',\n    Todo: '待辦事項',\n    'What needs to be done?': '有事嗎？',\n    Add: '新增',\n    All: '全部',\n    Active: '待辦',\n    Completed: '完成',\n    Edit: '編輯',\n    Delete: '刪除',\n    Check: '標記完成',\n    Cancel: '取消',\n    Save: '儲存',\n    Progress: '進度',\n    'Target Pomodoros': '目標番茄數',\n    'Completed Pomodoros': '完成番茄數'\n};\n\nfunction App() {\n\n    const localStorageKey = 'localTodo';\n    if (localStorage.getItem(localStorageKey) === null) {\n        localStorage.setItem(localStorageKey, JSON.stringify(DATA));\n    }\n    const localTodo = JSON.parse(localStorage.getItem(localStorageKey));\n\n    const [tasks, setTasks] = useState(localTodo);\n    const [lang, setLang] = useState('en');\n    const [currentTask, setCurrentTask] = useState(tasks.filter(t => t.current)[0]);\n\n    function updateLocalStorage(updatedTodos) {\n        localStorage.setItem(localStorageKey, JSON.stringify(updatedTodos));\n        return;\n    }\n\n    useEffect(() => {\n        updateLocalStorage(tasks);\n        setCurrentTask(tasks.filter(t => t.current)[0]);\n    }, [tasks]);\n\n    useEffect(() => {\n        document.documentElement.setAttribute('lang', lang);\n    }, [lang]);\n\n    function handleLanguage() {\n        (lang === 'en') ? setLang('zh-TW') : setLang('en');\n    }\n\n    function updateTaskProgress(id) {\n        const newTaskList = tasks\n            .map(task => {\n                // if this task has the same ID as the edited task\n                if (id === task.id && task.completedPomodoros !== task.targetPomodoros) {\n                    return {\n                        ...task,\n                        ...{\n                            completedPomodoros: task.completedPomodoros + 1\n                        }\n                    };\n                }\n                return task;\n            })\n            .map(task => {\n                // validate target & completed sessions\n                if ((task.targetPomodoros !== 0) && (task.targetPomodoros === task.completedPomodoros)) {\n                    return { ...task, completed: true }\n                } else if ((task.targetPomodoros !== 0) && (task.targetPomodoros !== task.completedPomodoros)) {\n                    return { ...task, completed: false }\n                } else {\n                    return task;\n                }\n            })\n        setTasks(newTaskList);\n    }\n\n    return (\n        <div id=\"App\">\n            <button aria-label={`switch language to ${(lang === 'en') ? 'Mandarin' : 'English'}`} id='language-btn' onClick={handleLanguage}>{(lang === 'en') ? '繁體中文' : 'English'}</button>\n            <Pomodoro\n                lang={lang}\n                LANG_MAP={LANG_MAP}\n                currentTask={currentTask}\n                updateTaskProgress={updateTaskProgress}\n            />\n            <TodoApp\n                tasks={tasks}\n                lang={lang}\n                LANG_MAP={LANG_MAP}\n                setTasks={setTasks}\n            />\n        </div>\n\n    )\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}